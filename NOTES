-------------- STRATEGY DESIGN PATTERN(BEHAVIOURAL) ----------------

-   Strategy design pattern  helps achieve OCP by defining a family of algorithms (strategies) that can be selected at runtime.

-   Key Takeaways
          ✔ Loose Coupling                – Business logic is decoupled from specific payment methods.
          ✔ Open/Closed Principle (OCP)   – We can add new strategies without modifying existing code.
          ✔ Scalability                   – Easy to extend, test, and maintain.

-   Same as the payment method example for the Open/ Closed principle.

-   Parent class have one default definition, then for example, among 3 child class 2 need to override the default
    behaviour with special one but both are same, then will result in code duplication.
    So we do is create an interface with that method and then implement this interface with different classes which have different behaviour(like payment methods or driving capability)
    Then the class will have an object of the type interface, and we do constructor injection, so anything can be passed.


---------------- OBSERVER DESIGN PATTERN(BEHAVIOURAL) -----------------


-   The Observer Pattern is a behavioral design pattern used when one object (Subject) changes its state and needs to notify multiple dependent objects (Observers) about the change automatically.
-   It follows the Publisher-Subscriber Model, where:

        -   Subject (Observable): Maintains a list of observers and notifies them of changes.
        -   Observers (Subscribers): Act upon receiving updates from the subject.

- Interview question -> implement the notify-me button for the item which is currently out-of-stock in the amazon web page.

-   Example Use Cases
        ✔ Real-time notifications – Stock price updates, weather alerts, cricket score updates, item came on stock.
        ✔ Event-driven systems – UI event listeners in GUI applications
        ✔ Message broadcasting – Chat applications, RSS feeds

-   ✅ With Observer Pattern	->  Loosely coupled, scalable, dynamically add/remove observers.

-   When to Use the Observer Pattern?
        ✅ When multiple objects need to be notified of state changes in another object.
        ✅ When you want to decouple the subject from observers.
        ✅ When building event-driven systems or real-time applications.


------------------- DECORATOR DESIGN PATTERN(STRUCTURAL) -----------------

- Decorator is a structural design pattern that lets you attach new behaviors to objects by placing these objects inside special wrapper objects that contain the behaviors.
- Instead of creating multiple subclasses to extend functionality, you use decorators to wrap objects and add features on the fly.
- Asked in interviews
- Question
        - Pizza with toppings
        - coffee and toppings
        - car with features

- Decorator has both "is-a" and "has-a" relationship.

- Example Use Cases
        ✅ Adding features to UI components (e.g., scrollbars, borders)
        ✅ Adding functionality like logging, caching, or encryption without modifying the core logic
        ✅ Extending functionality in file handling, stream processing, etc.

- Why this pattern?
    - avoid Class explosion -> we can do many permutations and combinations without creating class for each.

- When to Use the Decorator Pattern?
    ✅ When you want to dynamically add features to an object without modifying its class.
    ✅ When extending functionality using inheritance would lead to class explosion.
    ✅ When you want to combine different features flexibly (e.g., adding both milk and sugar).




----------------------------- SIMPLE FACTORY DESIGN PATTERN(CREATIONAL) --------------------

- This is very important and widely used design patterns in companies.
- Instead of instantiating classes directly using new, you use a factory method in a factory class that returns objects, often based on input parameters or configuration.


✅ Key Concepts:
-  Encapsulates object creation logic.
-  Helps in creating objects without exposing the instantiation logic to the client.
-  Useful when you have multiple related classes and want to return one of them dynamically.

🎯 When to Use:
-  When the exact class to instantiate is determined at runtime.
-  When you want to decouple object creation from its usage.
-  When you need a common interface for a family of products.

🔁 Real-World Analogies:
-  VehicleFactory that creates Bike, Car, Truck depending on user input.
-  UI toolkit that returns DarkButton or LightButton depending on theme.

- Factory Pattern: Gives you one object (e.g., one car).
- Abstract Factory: Gives you a set of related objects (e.g., car + engine + tires) that work well together.


Real world use cases in software development IMP
- Database connection -> connecting to different databases like postgresql, mongo etc.. based on parameter they return the correct one.
- Logging Mechanism -> Different logger like console, db logger etc. based on requirement.

- Any where there is object -> we could use factory pattern.

---------------------------- ABSTRACT FACTORY PATTERN --------------------------------

- It’s like a factory of factories.
- Here when new types get added -> Instead of modifying the factory method(which will violate the Open/ Closed Principle) -> We create a separate factory for the new type.
- These factories makes the system more scalable and extensible -> encapsulating the logic.
- Examples can be similar as above.
- Mostly not that much seen in interview -> we will be probably using simple factory pattern -> these are actually used in large code bases.
- The Abstract Factory Pattern provides an interface to create families of related or dependent objects without specifying their concrete classes.
- It’s a design pattern that lets you create families of related objects without specifying their exact classes.


✅ When to Use It

- Use Abstract Factory when:
- You need to create related objects (e.g., UI components for a theme, car parts, etc.)
- You want to ensure compatibility between the objects.
- You want to switch families easily (e.g., Light Theme → Dark Theme with no big code change).
- You want to decouple object creation from usage.

💻 Real-World Use Cases

  Use Case	                Abstract Factory Usage
- UI Theming (Dark/Light)	Create related components (buttons, text, etc.)
- Cross-platform toolkits	Create Windows vs macOS versions of widgets
- Game development	        Create sets of enemies, weapons per game level
- Database drivers	        Create families of connections, queries, configs